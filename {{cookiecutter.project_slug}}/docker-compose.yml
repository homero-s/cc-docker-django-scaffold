services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"
    # Make web available in both dev and prod profile runs
    profiles: ["dev", "prod"]
    healthcheck:
      # Light Python socket check so we don't rely on curl in the image
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('127.0.0.1',8000))"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 30s
{% if cookiecutter.use_postgres == 'y' %} 
    depends_on:
      db:
        condition: service_healthy
{% endif %}

{% if cookiecutter.use_nginx == "y" %}
  nginx:
    # Optional reverse proxy for prod-like runs
    # Create a minimal Dockerfile at ./deploy/nginx if you want custom config
    image: nginx:alpine
    depends_on:
      - web
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    profiles: ["proxy", "prod"]
{% endif %}

{% if cookiecutter.use_postgres == 'y' %}
  db:
    image: postgres:16-alpine
    env_file: .env
    # These envs are read by Postgres; DATABASE_URL in .env points to db:5432
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s
    # Only present when you ask for it (so Makefile can enable it with PROFILES="dev db")
    profiles: ["db"]

volumes:
  pgdata: {}
{% endif %}    