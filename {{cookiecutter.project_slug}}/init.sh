#!/usr/bin/env bash
#
# Bootstrap the project for the first run (and re-runs safely).
# - Creates .env (with generated SECRET_KEY) if missing
# - Starts Docker services with optional Compose PROFILES (db, proxy)
# - Waits for dependencies to be healthy
# - Runs Django migrations
# - Optionally creates a superuser (interactive by default, CI-friendly flags)
#
# Usage:
#   ./init.sh                       # interactive setup (SQLite by default)
#   ./init.sh --profiles "db proxy" # enable Postgres + Nginx profiles
#   ./init.sh --noninteractive \
#             --profiles "db" \
#             --superuser \
#             --su-username admin \
#             --su-email admin@example.com \
#             --su-password pass123
#
set -euo pipefail

# -------- config & defaults --------
DOCKER_COMPOSE="${DOCKER_COMPOSE:-docker compose}"
PROFILES=""
NONINTERACTIVE="false"
CREATE_SUPERUSER="false"
SU_USERNAME="${DJANGO_SUPERUSER_USERNAME:-}"
SU_EMAIL="${DJANGO_SUPERUSER_EMAIL:-}"
SU_PASSWORD="${DJANGO_SUPERUSER_PASSWORD:-}"
SKIP_BUILD="false"
FORCE_RECREATE_ENV="false"

ENV_FILE=".env"
ENV_EXAMPLE_FILE=".env.example"
WEB_SERVICE="web"
DB_SERVICE="db"          # used only if db profile is enabled
WEB_PORT="${WEB_PORT:-8000}"  # shown to the user at the end

# -------- helpers --------
log()  { printf "\033[1;34m[init]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[warn]\033[0m %s\n" "$*"; }
err()  { printf "\033[1;31m[err]\033[0m %s\n" "$*" >&2; }

abort() { err "$1"; exit 1; }

have() { command -v "$1" >/dev/null 2>&1; }

gen_secret_key() {
  # Generate a Django SECRET_KEY safely, without extra deps.
  # 50 chars from urlsafe base64.
  python - <<'PY' 2>/dev/null || true
import secrets, base64
raw = secrets.token_urlsafe(64)[:50]
print(raw)
PY
}

in_profiles() {
  # $1 is the profile to check (e.g., "db" or "proxy")
  case " $PROFILES " in
    *" $1 "*) return 0 ;;
    *) return 1 ;;
  esac
}

compose_cmd() {
  local cmd=("$DOCKER_COMPOSE")
  # shellcheck disable=SC2206
  for p in $PROFILES; do
    cmd+=("--profile" "$p")
  done
  printf "%s " "${cmd[@]}"
}

wait_for_db() {
  if ! in_profiles "db"; then
    return 0
  fi
  log "Waiting for Postgres to become healthy…"
  # pg_isready is available in the postgres image
  local retries=30
  local delay=2
  for i in $(seq 1 "$retries"); do
    if $DOCKER_COMPOSE exec -T "$DB_SERVICE" pg_isready -U "${POSTGRES_USER:-postgres}" >/dev/null 2>&1; then
      log "Postgres is ready."
      return 0
    fi
    sleep "$delay"
  done
  abort "Postgres did not become ready in time."
}

wait_for_web() {
  # Optional: check that the Django container is up (not necessarily app-ready)
  log "Waiting for $WEB_SERVICE container to start…"
  $DOCKER_COMPOSE ps "$WEB_SERVICE" >/dev/null || abort "Compose service '$WEB_SERVICE' not found."
  # If curl is present, ping the HTTP endpoint
  if have curl; then
    local retries=30
    local delay=2
    for i in $(seq 1 "$retries"); do
      if curl -sf "http://127.0.0.1:${WEB_PORT}/" >/dev/null 2>&1; then
        log "Web endpoint is responding."
        return 0
      fi
      sleep "$delay"
    done
    warn "Web endpoint not responding yet; continuing."
  else
    log "curl not found; skipping HTTP check."
  fi
}

ensure_env_file() {
  if [[ -f "$ENV_FILE" && "$FORCE_RECREATE_ENV" != "true" ]]; then
    log "$ENV_FILE already exists. (Use --force-env to rebuild)"
    return 0
  fi

  if [[ -f "$ENV_FILE" && "$FORCE_RECREATE_ENV" == "true" ]]; then
    warn "Recreating $ENV_FILE due to --force-env"
    rm -f "$ENV_FILE"
  fi

  if [[ -f "$ENV_EXAMPLE_FILE" ]]; then
    cp "$ENV_EXAMPLE_FILE" "$ENV_FILE"
    log "Copied $ENV_EXAMPLE_FILE → $ENV_FILE"
  else
    # sensible defaults if example is not present
    cat >"$ENV_FILE" <<'EOF'
# --- generated by init.sh ---
DEBUG=1
SECRET_KEY=
# You can use DATABASE_URL instead of the POSTGRES_* trio.
# DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
ALLOWED_HOSTS=localhost,127.0.0.1
EOF
    log "Created $ENV_FILE with sensible defaults."
  fi

  # Ensure SECRET_KEY exists
  if ! grep -q '^SECRET_KEY=' "$ENV_FILE"; then
    echo "SECRET_KEY=" >> "$ENV_FILE"
  fi
  if [[ -z "$(grep '^SECRET_KEY=' "$ENV_FILE" | cut -d= -f2-)" ]]; then
    local key
    key="$(gen_secret_key)"
    if [[ -n "$key" ]]; then
      # escape slashes/newlines if any
      key_escaped=$(printf '%s' "$key" | sed -e 's/[\/&]/\\&/g')
      sed -i.bak "s/^SECRET_KEY=.*/SECRET_KEY=${key_escaped}/" "$ENV_FILE"
      rm -f "$ENV_FILE.bak"
      log "Generated SECRET_KEY in $ENV_FILE"
    else
      warn "Could not generate SECRET_KEY (no Python?). Please set it manually in $ENV_FILE"
    fi
  fi

  # If db profile is enabled and DATABASE_URL is empty, provide a default
  if in_profiles "db"; then
    if ! grep -q '^DATABASE_URL=' "$ENV_FILE"; then
      echo "DATABASE_URL=" >> "$ENV_FILE"
    fi
    local dburl
    dburl="$(grep '^DATABASE_URL=' "$ENV_FILE" | cut -d= -f2-)"
    if [[ -z "$dburl" ]]; then
      sed -i.bak "s|^DATABASE_URL=.*|DATABASE_URL=postgresql://\${POSTGRES_USER:-postgres}:\${POSTGRES_PASSWORD:-postgres}@db:5432/\${POSTGRES_DB:-postgres}|" "$ENV_FILE"
      rm -f "$ENV_FILE.bak"
      log "Populated DATABASE_URL for Postgres profile."
    fi
  fi
}

run_migrations() {
  log "Applying Django migrations…"
  $(compose_cmd) exec -T "$WEB_SERVICE" python manage.py migrate
}

maybe_create_superuser() {
  if [[ "$CREATE_SUPERUSER" != "true" ]]; then
    if [[ "$NONINTERACTIVE" == "true" ]]; then
      return 0
    fi
    read -r -p "Create a Django superuser now? [y/N] " ans
    case "$ans" in
      y|Y) ;;
      *) return 0 ;;
    esac
  fi

  if [[ -n "$SU_USERNAME" && -n "$SU_EMAIL" && -n "$SU_PASSWORD" ]]; then
    log "Creating non-interactive superuser '$SU_USERNAME'…"
    $(compose_cmd) exec -T "$WEB_SERVICE" \
      python - <<PY
import os
from django.contrib.auth import get_user_model
os.environ.setdefault("DJANGO_SETTINGS_MODULE", os.getenv("DJANGO_SETTINGS_MODULE", "config.settings"))
import django; django.setup()
User = get_user_model()
u, created = User.objects.get_or_create(username="${SU_USERNAME}", defaults={"email":"${SU_EMAIL}"})
if created:
    u.set_password("${SU_PASSWORD}")
    u.is_superuser = True
    u.is_staff = True
    u.save()
    print("Created superuser")
else:
    print("User already exists; ensuring superuser/staff flags")
    u.is_superuser = True
    u.is_staff = True
    u.save()
PY
  else
    log "Creating interactive superuser…"
    $(compose_cmd) exec -it "$WEB_SERVICE" python manage.py createsuperuser || true
  fi
}

# --- helpers ---------------------------------------------------------------

is_proxy_profile_active() {
  # Profiles passed via Make (e.g. PROFILES='dev proxy db')
  if [ -n "${PROFILES:-}" ] && echo "$PROFILES" | tr ' ,:' '\n' | grep -qx "proxy"; then
    return 0
  fi

  return 1
}

# Choose a sensible host/port for the proxy. You can set these in .env if you like.
get_proxy_base_url() {
  local host="${NGINX_HOST:-${SERVER_NAME:-${DOMAIN:-localhost}}}"
  local port="${NGINX_PORT:-80}"

  # Show the port only if it's non-standard
  if [ "$port" = "80" ]; then
    printf "http://%s" "$host"
  else
    printf "http://%s:%s" "$host" "$port"
  fi
}

# --- summary ---------------------------------------------------------------

print_summary() {
  local app_path="${APP_PATH:-/}"        # e.g. "/" or "/app/"
  local admin_path="${ADMIN_PATH:-/admin/}"
  local direct_base="http://127.0.0.1:${WEB_PORT:-8000}"
  local proxy_base

  if is_proxy_profile_active; then
    proxy_base="$(get_proxy_base_url)"
    echo
    echo "───────────────────────────────"
    echo "✅ Reverse proxy is active"
    echo "───────────────────────────────"
    echo "App URL:    ${proxy_base%/}${app_path}"
    echo "Admin URL:  ${proxy_base%/}${admin_path}"
  else
    echo
    echo "───────────────────────────────"
    echo "ℹ️  Reverse proxy not active"
    echo "───────────────────────────────"
    echo "App URL:    ${direct_base%/}${app_path}"
    echo "Admin URL:  ${direct_base%/}${admin_path}"
  fi
  echo
}


# -------- arg parsing --------
while [[ $# -gt 0 ]]; do
  case "$1" in
    --profiles)           PROFILES="$2"; shift 2 ;;
    --noninteractive|-y)  NONINTERACTIVE="true"; shift ;;
    --superuser)          CREATE_SUPERUSER="true"; shift ;;
    --su-username)        SU_USERNAME="$2"; shift 2 ;;
    --su-email)           SU_EMAIL="$2"; shift 2 ;;
    --su-password)        SU_PASSWORD="$2"; shift 2 ;;
    --skip-build)         SKIP_BUILD="true"; shift ;;
    --force-env)          FORCE_RECREATE_ENV="true"; shift ;;
    -h|--help)
      sed -n '1,120p' "$0" | sed -n '/^# Usage:/,$p' | sed 's/^# //'
      exit 0
      ;;
    *) abort "Unknown flag: $1" ;;
  esac
done

# Normalize profiles (allow space- or comma-separated)
PROFILES="$(echo "$PROFILES" | tr ',' ' ' | xargs || true)"

# -------- preflight --------
have docker || abort "Docker is required."
$DOCKER_COMPOSE version >/dev/null || abort "'$DOCKER_COMPOSE' is not available."

# -------- env --------
ensure_env_file

# Export env for compose
set -a
# shellcheck disable=SC1090
source "$ENV_FILE"
set +a

# -------- up --------
log "Starting services (profiles: ${PROFILES:-none})…"
if [[ "$SKIP_BUILD" == "true" ]]; then
  $(compose_cmd) up -d
else
  $(compose_cmd) up -d --build
fi

# -------- waits --------
wait_for_db || true
wait_for_web || true

# -------- django ops --------
run_migrations
maybe_create_superuser

# -------- done --------
print_summary
